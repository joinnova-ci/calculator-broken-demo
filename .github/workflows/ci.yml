name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Cancel in-progress runs when new commits are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-commit checks for code quality
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1

  # Quick unit tests on all Python versions
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run unit tests
        run: |
          pytest tests/ -v --tb=short \
            --ignore=tests/e2e/ \
            --junitxml=junit-${{ matrix.python-version }}.xml \
            --cov=nova --cov-report=xml --cov-report=term

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-py${{ matrix.python-version }}
          path: |
            junit-${{ matrix.python-version }}.xml
            coverage.xml
          retention-days: 7

  # Regression tests - comprehensive but fast
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py3.12-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py3.12-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run regression tests
        run: |
          pytest tests/regression/ -v --tb=short \
            --junitxml=junit-regression.xml

      - name: Upload regression test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-test-results
          path: junit-regression.xml
          retention-days: 7

  # E2E tests - only on latest Python to save resources
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [pre-commit, unit-tests]
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-e2e'))

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-py3.12-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            pip-${{ runner.os }}-py3.12-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run E2E tests
        env:
          # Use dummy/test API keys or skip tests if not available
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
          NOVA_TEST_MODE: "true"
        run: |
          # Skip external API tests if no real keys available
          if [[ "$OPENAI_API_KEY" == "test-key" ]]; then
            echo "No API keys found, skipping external tests"
            pytest tests/e2e/ -v --tb=short -m "not external_api" \
              --junitxml=junit-e2e.xml
          else
            echo "Running full E2E suite with API keys"
            pytest tests/e2e/ -v --tb=short \
              --junitxml=junit-e2e.xml
          fi

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: junit-e2e.xml
          retention-days: 7

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
      - uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: gaurav-nelson/bandit-action@v1
        with:
          path: "src/"
          level: medium
          confidence: medium
          exit_zero: true

  # Test summary and coverage report
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, regression-tests, e2e-tests]
    if: always()

    steps:
      - uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Merge coverage reports
        run: |
          pip install coverage
          coverage combine test-results/*/coverage.xml || true
          coverage report || true

      - name: Test Report Summary
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: "test-results/**/junit-*.xml"
          reporter: java-junit
          fail-on-error: false

      - name: Comment PR with results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && always()
        with:
          script: |
            const fs = require('fs');
            const testResults = [];

            // Parse test results
            try {
              const files = fs.readdirSync('test-results', { recursive: true });
              for (const file of files) {
                if (file.endsWith('.xml')) {
                  testResults.push(file);
                }
              }
            } catch (e) {
              console.log('No test results found');
            }

            const comment = `## 🧪 Test Results Summary

            | Check | Status |
            |-------|--------|
            | Pre-commit | ${{ needs.pre-commit.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | Regression Tests | ${{ needs.regression-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || needs.e2e-tests.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |

            ${testResults.length > 0 ? `Found ${testResults.length} test report files.` : ''}

            _Add the \`run-e2e\` label to run end-to-end tests on this PR._`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
